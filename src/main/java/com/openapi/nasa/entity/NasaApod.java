package com.openapi.nasa.entity;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import lombok.Builder;

/**
 * Entity class representing NASA's Astronomy Picture of the Day (APOD).
 * 
 * <p>This class serves as both a JPA entity for database persistence and a data transfer object
 * for API responses. It maps to the "apod" table in the database and contains all relevant
 * information about an APOD entry.</p>
 * 
 * <p>Key features:</p>
 * <ul>
 *   <li>JPA entity mapping with @Entity, @Table annotations</li>
 *   <li>Field validation using Bean Validation API (@NotNull, @Size)</li>
 *   <li>Builder pattern implementation via Lombok's @Builder</li>
 *   <li>Complete set of properties matching NASA's APOD API format</li>
 * </ul>
 * 
 * <p>This class is central to the application's functionality, as it represents
 * the primary data structure being managed.</p>
 * 
 * @see com.openapi.nasa.daorepo.NasaRepository
 * @see com.openapi.nasa.service.NasaApiService
 */
@Entity
@Table(name="apod")  // Maps this entity to the "apod" table in the database
@Builder  // Lombok annotation that generates a builder pattern implementation
public class NasaApod {

    /**
     * Primary key/identifier for the APOD entry.
     * Automatically generated by the database (auto-increment).
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)  // Auto-increment strategy
    @Column(name="id")
    private int id;

    /**
     * Copyright information for the image/content.
     * Not required (can be null) but must have at least 1 character if provided.
     */
    @Column(name="copyright")
    @Size(min = 1, message = "is required")
    private String copyright;

    /**
     * Date of the APOD entry in string format (typically YYYY-MM-DD).
     * This is a required field with validation constraints.
     */
    @NotNull(message = "is required")  // Field cannot be null
    @Size(min = 1, message = "is required")  // Must have at least 1 character
    @Column(name="date")
    private String date;

    /**
     * Detailed explanation/description of the astronomy picture.
     * Stored as TEXT data type to accommodate long descriptions.
     */
    @Column(columnDefinition = "TEXT")  // Maps to TEXT data type in database
    @Lob  // Large Object - indicates this could be a large field
    @NotNull(message = "is required")
    @Size(min = 1, message = "is required")
    private String explanation;

    /**
     * URL to the high-definition version of the astronomy picture.
     */
    @Size(min = 1, message = "is required")
    @Column(name="hdurl")
    private String hdurl;

    /**
     * Title of the astronomy picture entry.
     */
    @Column(name="title")
    @NotNull(message = "is required")
    @Size(min = 1, message = "is required")
    private String title;

    /**
     * URL to the standard resolution version of the astronomy picture.
     */
    @NotNull(message = "is required")
    @Size(min = 1, message = "is required")
    @Column(name="url")
    private String url;

    /**
     * Standard constructor with all fields except ID.
     * 
     * @param copyright Copyright information
     * @param date Date of the APOD
     * @param explanation Description of the image
     * @param hdurl High-definition image URL
     * @param title Title of the APOD
     * @param url Standard image URL
     */
    public NasaApod(String copyright, String date, String explanation, String hdurl, String title, String url) {
        this.copyright = copyright;
        this.date = date;
        this.explanation = explanation;
        this.hdurl = hdurl;
        this.title = title;
        this.url = url;
    }

    /**
     * No-argument constructor required by JPA.
     * JPA requires a no-argument constructor for entity classes.
     */
    public NasaApod() {
        // Required by JPA for entity instantiation
    }

    /**
     * Full constructor with all fields including ID.
     * Useful for updating existing entries.
     * 
     * @param id Unique identifier
     * @param copyright Copyright information
     * @param date Date of the APOD
     * @param explanation Description of the image
     * @param hdurl High-definition image URL
     * @param title Title of the APOD
     * @param url Standard image URL
     */
    public NasaApod(int id, String copyright, String date, String explanation, String hdurl, String title, String url) {
        this.id = id;
        this.copyright = copyright;
        this.date = date;
        this.explanation = explanation;
        this.hdurl = hdurl;
        this.title = title;
        this.url = url;
    }

    /**
     * Gets the unique identifier of this APOD entry.
     * 
     * @return the ID of this APOD entry
     */
    public int getId() {
        return id;
    }

    /**
     * Sets the unique identifier of this APOD entry.
     * 
     * @param id the ID to set
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Gets the copyright information of this APOD entry.
     * 
     * @return the copyright information
     */
    public String getCopyright() {
        return copyright;
    }

    /**
     * Sets the copyright information of this APOD entry.
     * 
     * @param copyright the copyright information to set
     */
    public void setCopyright(String copyright) {
        this.copyright = copyright;
    }

    /**
     * Gets the date of this APOD entry.
     * 
     * @return the date in string format
     */
    public String getDate() {
        return date;
    }

    /**
     * Sets the date of this APOD entry.
     * 
     * @param date the date to set
     */
    public void setDate(String date) {
        this.date = date;
    }

    /**
     * Gets the explanation text of this APOD entry.
     * 
     * @return the explanation text
     */
    public String getExplanation() {
        return explanation;
    }

    /**
     * Sets the explanation text of this APOD entry.
     * 
     * @param explanation the explanation text to set
     */
    public void setExplanation(String explanation) {
        this.explanation = explanation;
    }

    /**
     * Gets the high-definition URL of this APOD entry.
     * 
     * @return the HD URL
     */
    public String getHdurl() {
        return hdurl;
    }

    /**
     * Sets the high-definition URL of this APOD entry.
     * 
     * @param hdurl the HD URL to set
     */
    public void setHdurl(String hdurl) {
        this.hdurl = hdurl;
    }

    /**
     * Gets the title of this APOD entry.
     * 
     * @return the title
     */
    public String getTitle() {
        return title;
    }

    /**
     * Sets the title of this APOD entry.
     * 
     * @param title the title to set
     */
    public void setTitle(String title) {
        this.title = title;
    }

    /**
     * Gets the standard URL of this APOD entry.
     * 
     * @return the URL
     */
    public String getUrl() {
        return url;
    }

    /**
     * Sets the standard URL of this APOD entry.
     * 
     * @param url the URL to set
     */
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Returns a string representation of this APOD entry.
     * Includes all fields for debugging purposes.
     * 
     * @return string representation of the object
     */
    @Override
    public String toString() {
        return "NasaApod{" +
                "id=" + id +
                ", copyright='" + copyright + '\'' +
                ", date='" + date + '\'' +
                ", explanation='" + explanation + '\'' +
                ", hdurl='" + hdurl + '\'' +
                ", title='" + title + '\'' +
                ", url='" + url + '\'' +
                '}';
    }
    
    // TODO: Student task - Add a method to check if this APOD entry is valid
    // TODO: Student task - Implement a method to extract image type from URL
}